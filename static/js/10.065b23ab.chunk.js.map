{"version":3,"sources":["lib/hooks/useSwrImages.ts","pages/SwrPage.tsx"],"names":["fetcher","url","params","a","axios","get","response","data","useSwrImages","useSWRInfinite","pageIndex","API_URL","error","isLoading","isError","size","setSize","refresh","mutate","SwrPage","location","useLocation","imageType","getImageType","pathname","replace","swrRoutes","swr","path","search","getLastUrlParam","useLocalStorage","STORAGE_KEY","recentSearches","setRecentSearches","useState","per_page","PER_PAGE","image_type","q","setParams","images","flatMap","hits","hasMore","useMemo","length","totalHits","refetchData","useCallback","useEffect","Array","from","Set","concat","slice","fetchMoreData","PageTemplate","menu","Object","values","filter","isPage","isNave","map","name","title","routes","description","ImageList","NotFound","isSearch"],"mappings":"uNAKMA,EAAO,uCAAG,WAAOC,EAAaC,GAApB,eAAAC,EAAA,sEACSC,IAAMC,IAAIJ,EAAK,CAAEC,WAD1B,cACRI,EADQ,yBAGPA,EAASC,MAHF,2CAAH,wDAsBEC,MAhBf,SAAsBN,GAAsC,IAAD,EACVO,aAC7C,SAACC,GAAD,MAAe,CAAC,GAAD,OAAIC,IAAJ,iBAAoBD,EAAY,GAAKR,KACpDF,GAFMO,EADiD,EACjDA,KAAMK,EAD2C,EAC3CA,MAKd,MAAO,CACLL,OACAM,WAAYD,IAAUL,EACtBO,UAAWF,EACXG,KAVuD,EACpCA,KAUnBC,QAXuD,EAC9BA,QAWzBC,QAZuD,EACrBC,S,0CC0DvBC,UA1Df,WACE,IAAMC,EAAWC,cACXC,EAAYC,YAAaH,EAASI,SAASC,QAAQC,IAAUC,IAAIC,KAAM,KACvEC,EAASC,YAAgBV,EAASS,OAAQ,MAAQ,GAHvC,EAI2BE,YAA0BC,IAAYC,gBAJjE,mBAIVA,EAJU,KAIMC,EAJN,OAKWC,mBAAsC,CAChEC,SAAUC,IACVC,WAAYhB,EACZiB,EAAGV,GAAU,KARE,mBAKV3B,EALU,KAKFsC,EALE,OAU4ChC,EAAaN,GAAlEK,EAVS,EAUTA,KAAMM,EAVG,EAUHA,UAAWC,EAVR,EAUQA,QAASC,EAVjB,EAUiBA,KAAMC,EAVvB,EAUuBA,QAASC,EAVhC,EAUgCA,QAC3CwB,EAASlC,EAAOA,EAAKmC,SAAQ,qBAAGC,QAAmB,GAGnDC,EADQC,mBAAQ,kBAAW,OAAJtC,QAAI,IAAJA,OAAA,EAAAA,EAAMuC,QAASvC,EAAK,GAAGwC,UAAY,IAAI,EAAK,OAAJxC,QAAI,IAAJA,OAAA,EAAAA,EAAMuC,SAAUvC,EAAK,GAAGwC,cACnEN,EAAOK,OAE3BE,EAAcC,sBAAW,sBAAC,sBAAA9C,EAAA,6DAC9BqC,EAAU,2BAAKtC,GAAN,IAAcoC,WAAYhB,EAAWiB,EAAGV,KADnB,SAExBb,EAAQ,GAFgB,uBAGxBC,IAHwB,2CAI7B,CAACK,EAAWpB,EAAQe,EAASY,EAAQb,IAExCkC,qBAAU,WACRrB,EAAOiB,QACLZ,GACgB,OAAdD,QAAc,IAAdA,OAAA,EAAAA,EAAgBa,QACZK,MAAMC,KAAK,IAAIC,IAAIpB,EAAeqB,OAAOzB,GAAQ0B,MAAMtB,EAAea,OAAS,GAAK,EAAI,KACxF,CAACjB,KAER3B,EAAOoC,aAAehB,GAAapB,EAAOqC,IAAMV,IAAWmB,MAG3D,CAAC1B,EAAWO,IAEf,IAAM2B,EAAgBP,sBAAW,sBAAC,sBAAA9C,EAAA,sEAC1Ba,EAAQD,EAAO,GADW,2CAE/B,CAACC,EAASD,IAEb,OACE,cAAC0C,EAAA,EAAD,CACE5C,UAAWA,EACXC,QAASA,EACT4C,KAAMC,OAAOC,OAAOlC,KACjBmC,QAAO,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAX,OAAwBD,GAAUC,KACzCC,KAAI,kBAAqB,CAAEpC,KAAvB,EAAGA,KAA0BqC,KAA7B,EAASA,SAChBC,MAAOC,IAAOxC,IAAIsC,KAClBG,YAAaD,IAAOxC,IAAIsC,KACxBrC,KAAMuC,IAAOxC,IAAIC,KARnB,SAUIf,GAAc+B,GAAYH,EAAOK,OAGjC,cAACuB,EAAA,EAAD,CAAW5B,OAAQA,EAAQG,QAASA,EAASY,cAAeA,IAF5D,cAACc,EAAA,EAAD,CAAUC,UAAQ","file":"static/js/10.065b23ab.chunk.js","sourcesContent":["import { useSWRInfinite } from 'swr';\nimport axios from 'axios';\nimport { Images, SearchImagesParams } from 'types/api';\nimport { API_URL } from 'constant';\n\nconst fetcher = async (url: string, params: Partial<SearchImagesParams>) => {\n  const response = await axios.get(url, { params });\n\n  return response.data;\n};\n\nfunction useSwrImages(params: Partial<SearchImagesParams>) {\n  const { data, error, size, setSize, mutate } = useSWRInfinite<Images>(\n    (pageIndex) => [`${API_URL}&page=${pageIndex + 1}`, params],\n    fetcher\n  );\n\n  return {\n    data,\n    isLoading: !error && !data,\n    isError: !!error,\n    size,\n    setSize,\n    refresh: mutate,\n  };\n}\n\nexport default useSwrImages;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport routes, { swrRoutes } from 'routes';\nimport { PER_PAGE, STORAGE_KEY } from 'constant';\nimport { getImageType, getLastUrlParam } from 'lib/utils';\nimport useSwrImages from 'lib/hooks/useSwrImages';\nimport { SearchImagesParams } from 'types/api';\nimport PageTemplate from 'components/base/PageTemplate';\nimport ImageList from 'components/image/ImageList';\nimport NotFound from 'components/error/NotFound';\nimport useLocalStorage from 'lib/hooks/useLocalStorage';\n\nfunction SwrPage() {\n  const location = useLocation();\n  const imageType = getImageType(location.pathname.replace(swrRoutes.swr.path, ''));\n  const search = getLastUrlParam(location.search, 'q') || '';\n  const [recentSearches, setRecentSearches] = useLocalStorage<string[]>(STORAGE_KEY.recentSearches);\n  const [params, setParams] = useState<Partial<SearchImagesParams>>({\n    per_page: PER_PAGE,\n    image_type: imageType,\n    q: search || '',\n  });\n  const { data, isLoading, isError, size, setSize, refresh } = useSwrImages(params);\n  const images = data ? data.flatMap(({ hits }) => hits) : [];\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const total = useMemo(() => (data?.length ? data[0].totalHits : 0), [data?.length && data[0].totalHits]);\n  const hasMore = total !== images.length;\n\n  const refetchData = useCallback(async () => {\n    setParams({ ...params, image_type: imageType, q: search });\n    await setSize(0);\n    await refresh();\n  }, [imageType, params, refresh, search, setSize]);\n\n  useEffect(() => {\n    search.length &&\n      setRecentSearches(\n        recentSearches?.length\n          ? Array.from(new Set(recentSearches.concat(search).slice(recentSearches.length > 1 ? -5 : 0)))\n          : [search]\n      );\n    (params.image_type !== imageType || params.q !== search) && refetchData();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [imageType, search]);\n\n  const fetchMoreData = useCallback(async () => {\n    await setSize(size + 1);\n  }, [setSize, size]);\n\n  return (\n    <PageTemplate\n      isLoading={isLoading}\n      isError={isError}\n      menu={Object.values(swrRoutes)\n        .filter(({ isPage, isNave }) => isPage && isNave)\n        .map(({ path, name }) => ({ path, name }))}\n      title={routes.swr.name}\n      description={routes.swr.name}\n      path={routes.swr.path}\n    >\n      {!isLoading && !hasMore && !images.length ? (\n        <NotFound isSearch />\n      ) : (\n        <ImageList images={images} hasMore={hasMore} fetchMoreData={fetchMoreData} />\n      )}\n    </PageTemplate>\n  );\n}\n\nexport default SwrPage;\n"],"sourceRoot":""}